// <auto-generated />
using System;
using ExcellyGenLMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExcellyGenLMS.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524120923_AddQuizEntities")]
    partial class AddQuizEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Admin.CourseCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Admin.Technology", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Auth.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequirePasswordChange")
                        .HasColumnType("bit");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("certificate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("CertificateData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("certificate_data");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("completion_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("certificate_title");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CoursePoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThumbnailImagePath")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.CourseDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("CourseDocuments");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.CourseTechnology", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("TechnologyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId", "TechnologyId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("CourseTechnologies");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enrollment_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LessonPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.MCQQuestionOption", b =>
                {
                    b.Property<int>("McqOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("mcq_option_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("McqOptionId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("option_text");

                    b.Property<int>("QuizBankQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_bank_question_id");

                    b.HasKey("McqOptionId");

                    b.HasIndex("QuizBankQuestionId");

                    b.ToTable("MCQQuestionOptions");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.Property<int>("QuizBankId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_bank_id");

                    b.Property<int>("QuizSize")
                        .HasColumnType("int")
                        .HasColumnName("quiz_size");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("quiz_title");

                    b.Property<int>("TimeLimitMinutes")
                        .HasColumnType("int")
                        .HasColumnName("time_limit_minutes");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int")
                        .HasColumnName("total_marks");

                    b.HasKey("QuizId");

                    b.HasIndex("LessonId");

                    b.HasIndex("QuizBankId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizAttempt", b =>
                {
                    b.Property<int>("QuizAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_attempt_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizAttemptId"));

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("completion_time");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int")
                        .HasColumnName("correct_answers");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_completed");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int")
                        .HasColumnName("total_questions");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("QuizAttemptId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizAttemptAnswer", b =>
                {
                    b.Property<int>("QuizAttemptAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_attempt_answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizAttemptAnswerId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<int>("QuizAttemptId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_attempt_id");

                    b.Property<int>("QuizBankQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_bank_question_id");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int")
                        .HasColumnName("selected_option_id");

                    b.HasKey("QuizAttemptAnswerId");

                    b.HasIndex("QuizAttemptId");

                    b.HasIndex("QuizBankQuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("QuizAttemptAnswers");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizBank", b =>
                {
                    b.Property<int>("QuizBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_bank_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizBankId"));

                    b.Property<int>("QuizBankSize")
                        .HasColumnType("int")
                        .HasColumnName("quiz_bank_size");

                    b.HasKey("QuizBankId");

                    b.ToTable("QuizBanks");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizBankQuestion", b =>
                {
                    b.Property<int>("QuizBankQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_bank_question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizBankQuestionId"));

                    b.Property<int?>("QuestionBankOrder")
                        .HasColumnType("int")
                        .HasColumnName("question_bank_order");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("question_content");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("question_type");

                    b.Property<int>("QuizBankId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_bank_id");

                    b.HasKey("QuizBankQuestionId");

                    b.HasIndex("QuizBankId");

                    b.ToTable("QuizBankQuestions");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.Badge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.CV", b =>
                {
                    b.Property<int>("CvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CvId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CvId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.Certification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CredentialId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IssuingOrganization")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ForumThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ThreadId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Category");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Creator");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ForumThreads");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ProjectTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TechnologyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("ProjectTechnologies");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ThreadComReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentId");

                    b.Property<string>("CommentorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Commentor");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CommentorId");

                    b.ToTable("ThreadComReplies");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ThreadComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Commentor");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int")
                        .HasColumnName("ThreadId");

                    b.HasKey("Id");

                    b.HasIndex("CommentorId");

                    b.HasIndex("ThreadId");

                    b.ToTable("ThreadComments");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BadgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EarnedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.UserCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCertifications");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.UserProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.UserTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TechnologyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTechnologies");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ActorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationSubType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RelatedEntity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("RelatedEntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMEmployeeAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WorkloadPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PMEmployeeAssignments");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RecipientId");

                    b.ToTable("PMNotifications");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMProject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("PMProjects");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMProjectRequiredRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PMProjectRequiredRoles");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMProjectTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TechnologyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("PMProjectTechnologies");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMRoleDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PMRoleDefinitions");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Auth.RefreshToken", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Course", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Admin.CourseCategory", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.CourseDocument", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.Lesson", "Lesson")
                        .WithMany("Documents")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.CourseTechnology", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.Course", "Course")
                        .WithMany("CourseTechnologies")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Admin.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Enrollment", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Lesson", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.MCQQuestionOption", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.QuizBankQuestion", "QuizBankQuestion")
                        .WithMany("MCQQuestionOptions")
                        .HasForeignKey("QuizBankQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizBankQuestion");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Quiz", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.QuizBank", "QuizBank")
                        .WithMany("Quizzes")
                        .HasForeignKey("QuizBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("QuizBank");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizAttempt", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizAttemptAnswer", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.QuizAttempt", "QuizAttempt")
                        .WithMany("Answers")
                        .HasForeignKey("QuizAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.QuizBankQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuizBankQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.MCQQuestionOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Question");

                    b.Navigation("QuizAttempt");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizBankQuestion", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Course.QuizBank", "QuizBank")
                        .WithMany("QuizBankQuestions")
                        .HasForeignKey("QuizBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizBank");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ForumThread", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ProjectTechnology", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Learner.Project", "Project")
                        .WithMany("Technologies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Admin.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ThreadComReply", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Learner.ThreadComment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "Commentor")
                        .WithMany()
                        .HasForeignKey("CommentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Commentor");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ThreadComment", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "Commentor")
                        .WithMany()
                        .HasForeignKey("CommentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Learner.ForumThread", "Thread")
                        .WithMany("Comments")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commentor");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.UserBadge", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Learner.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.UserCertification", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Learner.Certification", "Certification")
                        .WithMany("UserCertifications")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.UserProject", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Learner.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.UserTechnology", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Admin.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technology");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMEmployeeAssignment", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.ProjectManager.PMProject", "Project")
                        .WithMany("EmployeeAssignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMNotification", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.ProjectManager.PMProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMProject", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMProjectRequiredRole", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.ProjectManager.PMProject", "Project")
                        .WithMany("RequiredRoles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMProjectTechnology", b =>
                {
                    b.HasOne("ExcellyGenLMS.Core.Entities.ProjectManager.PMProject", "Project")
                        .WithMany("Technologies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcellyGenLMS.Core.Entities.Admin.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Admin.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Course", b =>
                {
                    b.Navigation("CourseTechnologies");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.Lesson", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizAttempt", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizBank", b =>
                {
                    b.Navigation("QuizBankQuestions");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Course.QuizBankQuestion", b =>
                {
                    b.Navigation("MCQQuestionOptions");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.Badge", b =>
                {
                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.Certification", b =>
                {
                    b.Navigation("UserCertifications");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ForumThread", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.Project", b =>
                {
                    b.Navigation("Technologies");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.Learner.ThreadComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ExcellyGenLMS.Core.Entities.ProjectManager.PMProject", b =>
                {
                    b.Navigation("EmployeeAssignments");

                    b.Navigation("RequiredRoles");

                    b.Navigation("Technologies");
                });
#pragma warning restore 612, 618
        }
    }
}
